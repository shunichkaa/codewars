#Your task is to find the path through the field which has the lowest cost to go through.
#As input you will receive:
#a toll_map matrix (as variable t) which holds data about how expensive it is to go through the given field coordinates
#a start coordinate (tuple) which holds information about your starting position
#a finish coordinate (tuple) which holds information about the position you have to get to









import heapq

def cheapest_path(t, start, finish):
    rows, cols = len(t), len(t[0])
    directions = [(1, 0, 'down'), (-1, 0, 'up'), (0, 1, 'right'), (0, -1, 'left')]  # Possible movements: down, up, right, left

    # Function to generate neighboring coordinates and their respective costs
    def neighbors_cost(coord):
        row, col = coord
        for dr, dc, direction in directions:
            nr, nc = row + dr, col + dc
            if 0 <= nr < rows and 0 <= nc < cols:
                yield (nr, nc), t[nr][nc], direction

    # Dijkstra's algorithm
    heap = [(0, start, [])]  # Heap for priority queue: (total_cost, current_coordinate, path)
    visited = set()

    while heap:
        total_cost, current, path = heapq.heappop(heap)
        if current in visited:
            continue
        if current == finish:
            return [d for _, _, d in path]  # Extract directions from the path

        visited.add(current)
        for neighbor, cost, direction in neighbors_cost(current):
            heapq.heappush(heap, (total_cost + cost, neighbor, path + [(neighbor, cost, direction)]))
