#You might already be familiar with many smartphones that allow you to use a geometric pattern as a security measure. 
#To unlock the device, you need to connect a sequence of dots/points in a grid by swiping your finger without lifting it
#as you trace the pattern through the screen.









EQUIV_PTS = {same: src for src,seq in (('A','CGI'), ('B','DFH')) for same in seq}

ALL       =  set('ABCDEFGHI')
LINKED_TO = {'A': ('BC','DG','EI','F', 'H'),
             'B': ('A', 'C', 'D', 'EH','F', 'G', 'I'),
             'C': ('BA','D', 'EG','FI','H'),
             'D': ('A', 'B', 'C', 'EF','G', 'H', 'I'),
             'E': tuple('ABCDFGHI'),
             'F': ('A', 'B', 'C', 'ED','G', 'H', 'I'),
             'G': ('DA','B', 'EC','F', 'HI'),
             'H': ('A', 'EB','C', 'D', 'F', 'G', 'I'),
             'I': ('EA','B', 'FC','D', 'HG')
            }


def DFS(c, depth, root, seens, patterns):
    if depth > len(ALL): return                
    
    patterns[root][depth] += 1
    
    seens.add(c)
    toExplore = ''.join( next((n for n in seq if n not in seens), '') for seq in LINKED_TO[c] )
    for nextC in toExplore:
        DFS(nextC, depth+1, root, seens, patterns)
    seens.discard(c)
    

PATTERNS = {}
for c in "ABE":
    PATTERNS[c] = [0]*10
    DFS(c, 1, c, set(), PATTERNS)


def count_patterns_from(start, length):
    if not (0 < length < 10) or start not in ALL: return 0    
    
    actualStart = EQUIV_PTS.get(start, start)
    return PATTERNS[actualStart][length]
    
